console.log('This site was generated by Hugo.');

// Main JavaScript file for Cyberguard theme

// Wait for DOM to be fully loaded
document.addEventListener('DOMContentLoaded', function() {
    // Initialize mobile menu
    initMobileMenu();
    
    // Smooth scrolling for anchor links
    initSmoothScroll();
    
    // Publications toggle
    const viewToggle = document.querySelector('.view-toggle');
    if (viewToggle) {
        viewToggle.addEventListener('click', function(e) {
            e.preventDefault();
            const isShowingAll = this.getAttribute('data-showing-all') === 'true';
            const hiddenPublications = document.querySelectorAll('.hidden-publication');
            
            if (isShowingAll) {
                // Hide publications
                hiddenPublications.forEach(pub => {
                    pub.style.display = 'none';
                });
                this.setAttribute('data-showing-all', 'false');
                // Use the original text that was set by Hugo template
                // which already has the correct i18n translation
                const viewAllText = this.getAttribute('data-view-all-text');
                if (viewAllText) {
                    this.textContent = viewAllText;
                }
                
                // Scroll to publications section
                document.getElementById('publications').scrollIntoView({ behavior: 'smooth' });
            } else {
                // Show all publications
                hiddenPublications.forEach(pub => {
                    pub.style.display = 'block';
                });
                this.setAttribute('data-showing-all', 'true');
                // Use the hide text that was set by Hugo template
                const hideText = this.getAttribute('data-hide-text');
                if (hideText) {
                    this.textContent = hideText;
                }
            }
        });
    }
    
    // Initialize animations
    initAnimations();
    
    // Initialize portfolio carousel
    initPortfolioCarousel();

    // Track language switches for analytics
    const langButtons = document.querySelectorAll('.btn-lang');
    langButtons.forEach(button => {
        button.addEventListener('click', function() {
            // Get the language from the URL
            const href = this.getAttribute('href');
            const lang = href.includes('/ru/') ? 'ru' : 'en';
            
            // Set the cookie for future visits
            setLanguagePreference(lang);
        });
    });
});

/**
 * Mobile menu initialization
 */
function initMobileMenu() {
    const mobileMenuToggle = document.querySelector('.mobile-menu-toggle');
    
    if (mobileMenuToggle) {
        mobileMenuToggle.addEventListener('click', function() {
            document.body.classList.toggle('menu-open');
        });
        
        // Close menu when clicking outside
        document.addEventListener('click', function(e) {
            if (!e.target.closest('.main-nav') && !e.target.closest('.mobile-menu-toggle') && document.body.classList.contains('menu-open')) {
                document.body.classList.remove('menu-open');
            }
        });
    }
}

/**
 * Smooth scrolling for anchor links
 */
function initSmoothScroll() {
    const anchorLinks = document.querySelectorAll('a[href^="#"]:not([href="#"])');
    
    anchorLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            
            const targetId = this.getAttribute('href');
            const targetElement = document.querySelector(targetId);
            
            if (!targetElement) return;
            
            const headerOffset = document.querySelector('.site-header').offsetHeight;
            const elementPosition = targetElement.getBoundingClientRect().top;
            const offsetPosition = elementPosition + window.pageYOffset - headerOffset;
            
            window.scrollTo({
                top: offsetPosition,
                behavior: 'smooth'
            });
        });
    });
}

/**
 * Initialize animations for content elements
 */
function initAnimations() {
    const animatedElements = document.querySelectorAll('.animate-on-scroll');
    
    const observerOptions = {
        root: null,
        rootMargin: '0px',
        threshold: 0.15
    };
    
    const observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('animated');
                observer.unobserve(entry.target);
            }
        });
    }, observerOptions);
    
    animatedElements.forEach(element => {
        observer.observe(element);
    });
}

/**
 * Set cookie helper function
 */
function setCookie(name, value, days) {
    let expires = '';
    if (days) {
        const date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        expires = '; expires=' + date.toUTCString();
    }
    document.cookie = name + '=' + value + expires + '; path=/; SameSite=Strict';
}

/**
 * Get cookie helper function
 */
function getCookie(name) {
    const nameEQ = name + '=';
    const ca = document.cookie.split(';');
    for (let i = 0; i < ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) === ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
}

/**
 * Language switcher functions
 */
function setLanguagePreference(lang) {
    setCookie('preferred_lang', lang, 365);
}

/**
 * Initialize portfolio carousel
 */
function initPortfolioCarousel() {
    const portfolioGrid = document.querySelector('.portfolio-grid');
    if (!portfolioGrid) return;
    
    const originalCards = Array.from(portfolioGrid.querySelectorAll('.portfolio-card'));
    if (originalCards.length === 0) return;
    
    // Function to check if scrolling is needed
    function checkAndEnableScrolling() {
        // Get container width
        const containerWidth = portfolioGrid.parentElement.offsetWidth;
        
        // Calculate total width of all items including gaps
        const firstCard = originalCards[0];
        const cardWidth = firstCard ? firstCard.offsetWidth : 320;
        const computedStyle = window.getComputedStyle(portfolioGrid);
        const gap = parseInt(computedStyle.gap) || 32;
        const totalItemsWidth = (originalCards.length * cardWidth) + ((originalCards.length - 1) * gap);
        
        // Check if items overflow the container
        const needsScrolling = totalItemsWidth > containerWidth;
        
        if (needsScrolling && originalCards.length > 1) {
            // Enable animation with responsive duration
            const animationDuration = window.innerWidth <= 768 ? '20s' : '30s';
            portfolioGrid.style.animation = `scrollPortfolio ${animationDuration} linear infinite`;
            portfolioGrid.style.width = 'max-content';
            portfolioGrid.style.display = 'inline-flex';
            
            // Remove any existing duplicates first
            const allCards = portfolioGrid.querySelectorAll('.portfolio-card');
            allCards.forEach((card, index) => {
                if (index >= originalCards.length) {
                    card.remove();
                }
            });
            
            // Duplicate items for seamless scrolling
            const fragment = document.createDocumentFragment();
            originalCards.forEach(card => {
                const clone = card.cloneNode(true);
                fragment.appendChild(clone);
            });
            portfolioGrid.appendChild(fragment);
            
            // If still not enough items to fill 2x the width, duplicate again
            const newTotalWidth = (originalCards.length * 2 * cardWidth) + ((originalCards.length * 2 - 1) * gap);
            if (newTotalWidth < containerWidth * 2 && originalCards.length <= 3) {
                originalCards.forEach(card => {
                    const clone = card.cloneNode(true);
                    portfolioGrid.appendChild(clone);
                });
            }
            
            // Add hover pause functionality
            portfolioGrid.addEventListener('mouseenter', pauseAnimation);
            portfolioGrid.addEventListener('mouseleave', resumeAnimation);
        } else {
            // Disable animation and center items
            portfolioGrid.style.animation = 'none';
            portfolioGrid.style.justifyContent = 'center';
            portfolioGrid.style.width = '100%';
            portfolioGrid.style.display = 'flex';
            
            // Remove duplicates if any
            const allCards = portfolioGrid.querySelectorAll('.portfolio-card');
            allCards.forEach((card, index) => {
                if (index >= originalCards.length) {
                    card.remove();
                }
            });
            
            // Remove hover listeners
            portfolioGrid.removeEventListener('mouseenter', pauseAnimation);
            portfolioGrid.removeEventListener('mouseleave', resumeAnimation);
        }
    }
    
    function pauseAnimation() {
        this.style.animationPlayState = 'paused';
    }
    
    function resumeAnimation() {
        this.style.animationPlayState = 'running';
    }
    
    // Initial check
    checkAndEnableScrolling();
    
    // Recheck on window resize
    let resizeTimer;
    window.addEventListener('resize', function() {
        clearTimeout(resizeTimer);
        resizeTimer = setTimeout(checkAndEnableScrolling, 250);
    });
}
